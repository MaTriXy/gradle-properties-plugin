#!groovy
// The above triggers groovy syntax highlighting in vim

buildscript {
	repositories {
		mavenCentral()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath 'com.gradle.publish:plugin-publish-plugin:0.11.0'
	}
}

plugins {
	id 'net.saliman.cobertura' version '3.0.0'
}

apply plugin: 'java-gradle-plugin'
apply plugin: "groovy"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: 'com.gradle.plugin-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Release version that won't conflict with the bintray plugin
def releaseVersion = "1.5.2-SNAPSHOT"
group = "net.saliman"
archivesBaseName = 'gradle-properties-plugin'
version = releaseVersion
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if ( isReleaseVersion ) {
	println "using staging"
	ext.mavenCentralUploadUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
	println "using snapshot"
	ext.mavenCentralUploadUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	compile gradleApi()
	compile localGroovy()
	testCompile "junit:junit:4.12"
	archives "org.apache.maven.wagon:wagon-ssh:2.8"
	archives "org.apache.maven.wagon:wagon-ssh-external:2.8"
}

task sourceJar(type: Jar) {
	description = "An archive of the source code for Maven Central"
	classifier = "sources"
	from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
	description = "An archive of the GroovyDocs for Maven Central"
	classifier = 'javadoc'
	from groovydoc
}

// Configure the java-gradle-plugin.  Note that the ID must match it's Gradle Plugin Portal id.
// This will screw up Maven publishing, but we'll fix that later.
gradlePlugin {
  plugins {
    propertiesPlugin {
      id = 'net.saliman.properties'
      displayName = 'Gradle Properties Plugin'
      description = "A Gradle plugin for loading and working with properties, enhancing Gradle's built in functionality."
      implementationClass = 'net.saliman.gradle.plugin.properties.PropertiesPlugin'
    }
  }
}

// configuration for publishing to the Gradle plugins portal
pluginBundle {
	website = 'https://github.com/stevesaliman/gradle-properties-plugin'
	vcsUrl = 'https://github.com/stevesaliman/gradle-properties-plugin.git'
	description = "A Gradle plugin for loading and working with properties, enhancing Gradle's built in functionality."
	tags = ['gradle', 'properties']

	plugins {
		propertiesPlugin {
			id = 'net.saliman.properties'
			displayName = 'Gradle Properties plugin'
		}
	}
}

// Configure the maven-publish plugin
publishing {
	publications {
		propertiesPlugin(MavenPublication) {
			from components.java
			artifact groovydocJar
			artifact sourceJar
			pom {
				name = 'Gradle Properties Plugin'
				description = "A Gradle plugin for loading and working with properties, enhancing Gradle's built in functionality."
				url = 'https://github.com/stevesaliman/gradle-properties-plugin'
				packaging = 'jar'
				licenses {
					license {
						name = 'The Apache Software License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'stevesaliman'
						name = 'Steven C. Saliman'
						email = 'support@saliman.net'
					}
				}
				scm {
					connection = 'scm:https://stevesaliman@github.com/stevesaliman/gradle-properties-plugin'
					developerConnection = 'scm:git@github.com:stevesaliman/gradle-properties-plugin.git'
					url = 'https://github.com/stevesaliman/gradle-properties-plugin'
				}
			}
		}
	}

	repositories {
		maven {
			url = mavenCentralUploadUrl
			// We only need to mess with credentials if we're publishing...
			if ( gradle.startParameter.taskNames.contains("publish") ) {
				// Use Java's console to read from the console (no good for a CI environment)
				def console = System.console()
				console.printf "\n\nWe have to upload some things in this build...\n\n"

				if ( !project.hasProperty('mavenCentralUsername') ) {
					def mavenCentralUsername = console.readLine("Maven Central Username: ")
					allprojects { ext."mavenCentralUsername" = mavenCentralUsername }
				}

				if ( !project.hasProperty('mavenCentralPassword') ) {
					def mavenCentralPassword = console.readLine("Maven Central Password: ")
					allprojects { ext."mavenCentralPassword" = mavenCentralPassword }
				}
				credentials {
					username mavenCentralUsername
					password mavenCentralPassword
				}
			}
		}
	}
}

signing {
	sign publishing.publications.propertiesPlugin
}

// When we're ready to go, there are a couple of things we'll need to do before we execute anything.
gradle.taskGraph.whenReady { taskGraph ->
	// This is a rather nasty little hack.  When we apply java-gradle-plugin,  It creates some
	// maven-publish tasks that conflict with the manual configuration - it tries to publish a
	// org.liquibase.gradle artifact, which is wrong.  The quick and very dirty solution is to
	// disable those tasks.

	// Comment this to publish to Gradle, Uncomment for Maven Central
//  taskGraph.allTasks.findAll { it.name ==~ /.*MavenPublication.*/ }*.enabled = false

	// Only *require* signing if we are uploading a release version.  If we do need to sign, make
	// sure we've got the properties we need to do the signing.
	if ( isReleaseVersion && taskGraph.hasTask(":publish") ) {
		// Use Java's console to read from the console (no good for a CI environment)
		def console = System.console()
		console.printf "\n\nWe have to sign some things in this build...\n\n"

		if ( !project.hasProperty('signing.keyId') ) {
			def id = console.readLine("PGP Public Key Id: ")
			allprojects { ext."signing.keyId" = id }
		}

		if ( !project.hasProperty('signing.secretKeyRingFile') ) {
			def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
			allprojects { ext."signing.secretKeyRingFile" = file }
		}

		if ( !project.hasProperty('signing.password') ) {
			def password = console.readPassword("PGP Private Key Password: ")
			allprojects { ext."signing.password" = password }
		}

		console.printf "\nThanks.\n\n"
	} else {
		tasks.withType(org.gradle.plugins.signing.Sign).all {
			it.enabled = false
		}
	}
}

idea {
	module {

		//if you prefer different output folders
		inheritOutputDirs = false
		outputDir = file('build/idea/out')
		testOutputDir = file('build/idea/testOut')
		//if you love browsing Javadoc
		downloadJavadoc = true
		//and hate reading sources :)
		downloadSources = false
	}
}

// Configure Idea plugin so that it generates project files that use git for
// source control.  Thank you to Eric Wendelin for showing me this trick.
idea.project.ipr.withXml { provider ->
	def node = provider.asNode()
	def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
	vcsConfig.mapping[0].'@vcs' = 'Git'

	// set gradle home
	def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
	gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])
}
